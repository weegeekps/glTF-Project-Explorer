{"version":3,"sources":["components/ProjectDetailList.tsx","components/ProjectCardHeader.tsx","components/Markdown.tsx","components/ProjectCard.tsx","components/ProjectList.tsx","store/filters/Types.ts","interfaces/IFilter.ts","store/filters/Actions.ts","utils/FilterHelpers.ts","components/FilterBarOptions.tsx","components/FilterBarSelected.tsx","components/FilterBar.tsx","components/SearchBar.tsx","store/projects/Types.ts","store/results/Types.ts","App.tsx","store/Reducers.ts","store/projects/Reducers.ts","store/filters/Reducers.ts","store/results/Reducers.ts","services/DataService.ts","store/projects/Actions.ts","store/projects/Sagas.ts","store/projects/Selectors.ts","store/filters/Sagas.ts","store/filters/Selectors.ts","store/results/Actions.ts","store/results/Sagas.ts","store/Sagas.ts","index.tsx"],"names":["ProjectDetailList","props","header","items","className","map","item","key","ProjectCardHeader","project","link","href","name","Markdown","unsafeMarkdown","body","useState","__html","safeHtml","setSafeHtml","useEffect","md","Promise","resolve","reject","marked","err","result","purify","sanitize","then","dangerouslySetInnerHTML","shouldShowSection","length","ProjectCard","description","task","license","language","type","inputs","outputs","connect","FilterActionTypes","FilterDimension","state","projects","results","values","p","id","updateFilters","tasks","types","licenses","languages","titleSubstring","UPDATE_FILTERS","updateSelectedFilters","selected","Set","UPDATE_SELECTED_FILTERS","createNewFilter","dimension","value","determineClassName","filter","Type","Task","License","Language","FilterBarOptions","filters","label","addAction","isVisible","setIsVisible","toggleVisibility","useCallback","onClick","f","FilterBarSelected","selectedFilters","removeAction","resetAction","selectedFiltersArray","Array","from","mapDispatchToProps","taskFilters","typeFilters","licenseFilters","languageFilters","handleFilterAddClick","_","add","handleFilterRemoveClick","delete","handleFilterResetClick","clear","ProjectsActionTypes","ResultsActionTypes","updateTitleSubstringFilter","UPDATE_TITLE_SUBSTRING_FILTER","handleSearch","event","newTitleSubstring","target","placeholder","onChange","App","combineReducers","isFetchingProjects","action","PROJECTS_REQUESTED","PROJECTS_SUCCESSFUL","PROJECTS_FAILED","STORE_RESULTS","fetchProjects","fetch","r","json","catch","error","console","successfulProjects","retrieveProjects","updateProjects","call","put","actions","takeEvery","getProjects","calculateFilters","watchForFilterRecalculate","DEFAULT_FULL_TEXT_TITLE_VALUE","calculateTaskFilters","flatMap","x","t","calculateTypeFilters","calculateLicenseFilters","l","calculateLanguageFilters","select","projectSelectors","all","getFilters","getSelectedFilters","createSelector","getTitleSubstring","storeResults","applyFilters","watchForResultUpdates","applyTagFilters","size","dimensions","Object","groupedFilters","reduce","acc","curr","push","match","some","v","applyTitleSearchFilter","includes","filterSelectors","interimResults","debounce","startup","root","fork","watchForProjectUpdates","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","run","rootSagas","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.270f0889.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ProjectDetailList.css\";\n\nexport interface IProjectDetailListProps {\n  header: string;\n  items?: string[];\n}\n\nconst ProjectDetailList: React.FC<IProjectDetailListProps> = props => {\n  const { header, items } = props;\n\n  if (!items) {\n    return null;\n  }\n\n  return (\n    <div className=\"project-card-details\">\n      <h2>{header}</h2>\n      <ul>\n        {items.map(item => (\n          <li key={item}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ProjectDetailList;\n","import React from \"react\";\nimport { IProjectInfo } from \"../interfaces/IProjectInfo\";\n\ninterface IProjectCardHeader {\n  project: IProjectInfo;\n}\n\nconst ProjectCardHeader: React.FC<IProjectCardHeader> = props => {\n  const { project } = props;\n\n  return (\n    <h1>\n      {project.link ? <a href={project.link}>{project.name}</a> : project.name}\n    </h1>\n  );\n};\n\nexport default ProjectCardHeader;\n","import React, { useState, useEffect } from \"react\";\nimport marked from \"marked\";\nimport purify from \"dompurify\";\n\ninterface IMarkdown {\n  className: string;\n  body: string;\n}\n\nconst parseAndSanitizeMarkdown = (md: string): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    marked(md, (err, result) => {\n      if (err) reject(err);\n\n      // Marked does not sanitize the html, so we must do so ourselves.\n      resolve(purify.sanitize(result));\n    });\n  });\n};\n\nconst Markdown: React.FC<IMarkdown> = props => {\n  const { className, body: unsafeMarkdown } = props;\n\n  const [safeHtml, setSafeHtml] = useState({ __html: \"\" });\n\n  // This effect is for performance reasons. It will only execute if the value\n  //   of the body prop is updated.\n  useEffect(() => {\n    parseAndSanitizeMarkdown(unsafeMarkdown).then(result =>\n      setSafeHtml({ __html: result })\n    );\n  }, [unsafeMarkdown]);\n\n  return <div className={className} dangerouslySetInnerHTML={safeHtml}></div>;\n};\n\nexport default Markdown;\n","import React from \"react\";\nimport { IProjectInfo } from \"../interfaces/IProjectInfo\";\nimport ProjectDetailList from \"./ProjectDetailList\";\nimport ProjectCardHeader from \"./ProjectCardHeader\";\nimport \"./ProjectCard.css\";\nimport Markdown from \"./Markdown\";\n\nconst shouldShowSection = (items?: string[]) => items && items.length > 0;\n\nexport interface IProjectCardProps {\n  project: IProjectInfo;\n}\n\nconst ProjectCard: React.FC<IProjectCardProps> = props => {\n  const { project } = props;\n\n  return (\n    <div className=\"project-card\">\n      <ProjectCardHeader project={project} />\n      <div className=\"project-card-content\">\n        {project.description && (\n          <Markdown\n            className=\"project-card-description\"\n            body={project.description}\n          />\n        )}\n        {shouldShowSection(project.task) && (\n          <ProjectDetailList header=\"Task\" items={project.task} />\n        )}\n        {shouldShowSection(project.license) && (\n          <ProjectDetailList header=\"License\" items={project.license} />\n        )}\n        {shouldShowSection(project.language) && (\n          <ProjectDetailList\n            header=\"Supported Languages\"\n            items={project.language!}\n          />\n        )}\n        {shouldShowSection(project.type) && (\n          <ProjectDetailList header=\"Type\" items={project.type} />\n        )}\n        {shouldShowSection(project.inputs) && (\n          <ProjectDetailList header=\"Input Methods\" items={project.inputs} />\n        )}\n        {shouldShowSection(project.outputs) && (\n          <ProjectDetailList header=\"Output Methods\" items={project.outputs} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectCard;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { IProjectInfo } from \"../interfaces/IProjectInfo\";\nimport { IAppState } from \"../interfaces/IAppState\";\nimport ProjectCard from \"./ProjectCard\";\n\nexport interface IProjectListProps {\n  projects: IProjectInfo[];\n}\n\nconst ProjectList: React.FC<IProjectListProps> = props => {\n  const { projects } = props;\n\n  return (\n    <>{projects && projects.map(p => <ProjectCard project={p} key={p.id} />)}</>\n  );\n};\n\nfunction mapStateToProps(state: IAppState): IProjectListProps {\n  const {\n    results: { values: projects }\n  } = state;\n\n  return { projects };\n}\n\nexport default connect(mapStateToProps)(ProjectList);\n","export enum FilterActionTypes {\n  UPDATE_FILTERS = \"UPDATE_FILTERS\",\n  UPDATE_SELECTED_FILTERS = \"UPDATE_SELECTED_FILTERS\",\n  UPDATE_TITLE_SUBSTRING_FILTER = \"UPDATE_TITLE_SUBSTRING_FILTER\",\n  PERFORM_SEARCH = \"PERFORM_SEARCH\"\n}\n","export enum FilterDimension {\n  Task = \"task\",\n  Type = \"type\",\n  License = \"license\",\n  Language = \"language\"\n}\n\nexport interface IFilter {\n  dimension: FilterDimension;\n  value: string;\n  // selected: boolean;\n}\n\nexport function createNewFilter(\n  dimension: FilterDimension,\n  value: string\n): IFilter {\n  return {\n    dimension,\n    value\n    // selected: false\n  };\n}\n","import {\n  IUpdateFiltersAction,\n  IUpdateSelectedFiltersAction,\n  IUpdateTitleSubstringFilterAction\n} from \"./Interfaces\";\nimport { FilterActionTypes } from \"./Types\";\nimport { IFilter } from \"../../interfaces/IFilter\";\n\nexport function updateFilters(\n  tasks: IFilter[],\n  types: IFilter[],\n  licenses: IFilter[],\n  languages: IFilter[],\n  titleSubstring: string\n): IUpdateFiltersAction {\n  return {\n    type: FilterActionTypes.UPDATE_FILTERS,\n    tasks,\n    types,\n    licenses,\n    languages,\n    titleSubstring\n  };\n}\n\nexport function updateSelectedFilters(\n  selected: Set<IFilter>\n): IUpdateSelectedFiltersAction {\n  // React needs a new Set each time.\n  selected = new Set(selected);\n  return {\n    type: FilterActionTypes.UPDATE_SELECTED_FILTERS,\n    selected\n  };\n}\n\nexport function updateTitleSubstringFilter(\n  titleSubstring: string\n): IUpdateTitleSubstringFilterAction {\n  return {\n    type: FilterActionTypes.UPDATE_TITLE_SUBSTRING_FILTER,\n    titleSubstring\n  };\n}\n","import { IFilter, FilterDimension } from \"../interfaces/IFilter\";\n\nexport const determineClassName = (filter: IFilter) => {\n  switch (filter.dimension) {\n    case FilterDimension.Type:\n      return \"type-filter\";\n    case FilterDimension.Task:\n      return \"task-filter\";\n    case FilterDimension.License:\n      return \"license-filter\";\n    case FilterDimension.Language:\n      return \"language-filter\";\n    default:\n      return \"\";\n  }\n};\n","import React, { useState, useCallback } from \"react\";\nimport { IFilter } from \"../interfaces/IFilter\";\nimport { determineClassName } from \"../utils/FilterHelpers\";\nimport \"./FilterBarOptions.css\";\n\nexport interface IFilterBarOptionsProps {\n  filters: IFilter[];\n  label: string;\n  addAction: (f: IFilter) => (_: React.MouseEvent) => void;\n}\n\nconst FilterBarOptions: React.FC<IFilterBarOptionsProps> = props => {\n  const { filters, label, addAction } = props;\n\n  const [isVisible, setIsVisible] = useState(false);\n\n  const toggleVisibility = useCallback(() => {\n    setIsVisible(!isVisible);\n  }, [isVisible, setIsVisible]);\n\n  return (\n    <>\n      {filters.length > 0 && (\n        <div className=\"filter-bar-options\">\n          <h2 onClick={toggleVisibility}>\n            {label} {isVisible ? \"▲\" : \"▼\"}\n          </h2>\n          <div className={isVisible ? \"\" : \"hide\"}>\n            <ul>\n              {filters.map(f => (\n                <li key={f.value}>\n                  <button\n                    className={determineClassName(f)}\n                    onClick={addAction(f)}\n                  >\n                    {f.value}\n                  </button>\n                </li>\n              ))}\n            </ul>\n            <p className=\"instructions\">Click to add</p>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default FilterBarOptions;\n","import React from \"react\";\nimport { IFilter } from \"../interfaces/IFilter\";\nimport \"./FilterBarSelected.css\";\nimport { determineClassName } from \"../utils/FilterHelpers\";\n\nexport interface IFilterBarSelectedProps {\n  selectedFilters: Set<IFilter>;\n  removeAction: (f: IFilter) => (_: React.MouseEvent) => void;\n  resetAction: (_: React.MouseEvent) => void;\n}\n\nconst FilterBarSelected: React.FC<IFilterBarSelectedProps> = props => {\n  const { selectedFilters, removeAction, resetAction } = props;\n\n  const selectedFiltersArray = Array.from(selectedFilters);\n\n  return (\n    <div className=\"filter-bar-selected\">\n      <h2>Selected Filters</h2>\n      <ul>\n        {selectedFiltersArray.length > 0 ? (\n          <>\n            {selectedFiltersArray.map(f => (\n              <li key={f.value}>\n                <button\n                  className={determineClassName(f)}\n                  onClick={removeAction(f)}\n                >\n                  {f.value} <span className=\"clear-cross\">✕</span>\n                </button>\n              </li>\n            ))}\n            <li>\n              <button className=\"clear-all-filters\" onClick={resetAction}>\n                Clear All Filters\n              </button>\n            </li>\n          </>\n        ) : (\n          <li>\n            <p className=\"no-filters-message\">No filters selected.</p>\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default FilterBarSelected;\n","import React, { useCallback, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { IFilter } from \"../interfaces/IFilter\";\nimport { IAppState } from \"../interfaces/IAppState\";\nimport { updateSelectedFilters } from \"../store/filters/Actions\";\nimport FilterBarOptions from \"./FilterBarOptions\";\nimport \"./FilterBar.css\";\nimport FilterBarSelected from \"./FilterBarSelected\";\n\nexport interface IFilterBarProps {\n  taskFilters: IFilter[];\n  typeFilters: IFilter[];\n  licenseFilters: IFilter[];\n  languageFilters: IFilter[];\n  selectedFilters: Set<IFilter>;\n  updateSelectedFilters: typeof updateSelectedFilters;\n}\n\nconst FilterBar: React.FC<IFilterBarProps> = props => {\n  const {\n    taskFilters,\n    typeFilters,\n    licenseFilters,\n    languageFilters,\n    selectedFilters,\n    updateSelectedFilters\n  } = props;\n\n  const [isVisible, setIsVisible] = useState(false);\n\n  const toggleVisibility = useCallback(() => {\n    setIsVisible(!isVisible);\n  }, [isVisible, setIsVisible]);\n\n  const handleFilterAddClick = useCallback(\n    (filter: IFilter) => (_: React.MouseEvent) => {\n      selectedFilters.add(filter);\n      updateSelectedFilters(selectedFilters);\n    },\n    [selectedFilters, updateSelectedFilters]\n  );\n\n  const handleFilterRemoveClick = useCallback(\n    (filter: IFilter) => (_: React.MouseEvent) => {\n      selectedFilters.delete(filter);\n      updateSelectedFilters(selectedFilters);\n    },\n    [selectedFilters, updateSelectedFilters]\n  );\n\n  const handleFilterResetClick = useCallback(\n    _ => {\n      selectedFilters.clear();\n      updateSelectedFilters(selectedFilters);\n    },\n    [selectedFilters, updateSelectedFilters]\n  );\n\n  return (\n    <div className=\"filter-bar\">\n      <div className=\"filter-bar-header\">\n        <h1 onClick={toggleVisibility}>\n          Filter Results {isVisible ? \"▲\" : \"▼\"}\n        </h1>\n      </div>\n      <div className={isVisible ? \"filter-bar-expando\" : \"hide\"}>\n        <FilterBarSelected\n          selectedFilters={selectedFilters}\n          removeAction={handleFilterRemoveClick}\n          resetAction={handleFilterResetClick}\n        />\n        <FilterBarOptions\n          filters={taskFilters}\n          label=\"Filter by Task\"\n          addAction={handleFilterAddClick}\n        />\n        <FilterBarOptions\n          filters={typeFilters}\n          label=\"Filter by Type\"\n          addAction={handleFilterAddClick}\n        />\n        <FilterBarOptions\n          filters={licenseFilters}\n          label=\"Filter by License\"\n          addAction={handleFilterAddClick}\n        />\n        <FilterBarOptions\n          filters={languageFilters}\n          label=\"Filter by Language\"\n          addAction={handleFilterAddClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction mapStateToProps(state: IAppState) {\n  const {\n    filters: {\n      tasks: taskFilters,\n      types: typeFilters,\n      licenses: licenseFilters,\n      languages: languageFilters,\n      selected: selectedFilters\n    }\n  } = state;\n\n  return {\n    taskFilters,\n    typeFilters,\n    licenseFilters,\n    languageFilters,\n    selectedFilters\n  };\n}\n\nconst mapDispatchToProps = {\n  updateSelectedFilters\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FilterBar);\n","import React, { useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport { IAppState } from \"../interfaces/IAppState\";\nimport { updateTitleSubstringFilter } from \"../store/filters/Actions\";\nimport \"./SearchBar.css\";\n\nexport interface ISearchBarProps {\n  titleSubstring: string;\n  updateTitleSubstringFilter: typeof updateTitleSubstringFilter;\n}\n\nconst SearchBar: React.FC<ISearchBarProps> = props => {\n  const { titleSubstring, updateTitleSubstringFilter } = props;\n\n  const handleSearch = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const newTitleSubstring = event.target.value;\n      updateTitleSubstringFilter(newTitleSubstring);\n    },\n    [updateTitleSubstringFilter]\n  );\n\n  return (\n    <div className=\"search-bar\">\n      <h1>Search by Title</h1>\n      <input\n        placeholder=\"Type to search\"\n        value={titleSubstring}\n        onChange={handleSearch}\n      ></input>\n    </div>\n  );\n};\n\nfunction mapStateToProps(state: IAppState) {\n  const {\n    filters: { titleSubstring }\n  } = state;\n\n  return {\n    titleSubstring\n  };\n}\n\nconst mapDispatchToProps = {\n  updateTitleSubstringFilter\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SearchBar);\n","export enum ProjectsActionTypes {\n  PROJECTS_REQUESTED = \"PROJECTS_REQUESTED\",\n  PROJECTS_SUCCESSFUL = \"PROJECTS_SUCCESSFUL\",\n  PROJECTS_FAILED = \"PROJECTS_FAILED\"\n}\n","export enum ResultsActionTypes {\n  RECALCULATE_RESULTS = \"RECALCULATE_RESULTS\",\n  STORE_RESULTS = \"STORE_RESULTS\"\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport ProjectList from \"./components/ProjectList\";\nimport FilterBar from \"./components/FilterBar\";\nimport SearchBar from \"./components/SearchBar\";\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <div className=\"header\">\n        <h1>glTF Project Explorer</h1>\n      </div>\n      <div className=\"content\">\n        <SearchBar></SearchBar>\n        <FilterBar></FilterBar>\n        <ProjectList></ProjectList>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { projects } from \"./projects/Reducers\";\nimport { filters } from \"./filters/Reducers\";\nimport { results } from \"./results/Reducers\";\n\nexport default combineReducers({\n  projects,\n  filters,\n  results\n});\n","import { ProjectsActions } from \"./Interfaces\";\nimport { ProjectsActionTypes } from \"./Types\";\nimport { IProjectsState } from \"../../interfaces/IAppState\";\n\nexport function projects(\n  state: IProjectsState = {\n    isFetchingProjects: false,\n    values: []\n  },\n  action: ProjectsActions\n) {\n  switch (action.type) {\n    case ProjectsActionTypes.PROJECTS_REQUESTED:\n      return { ...state, isFetchingProjects: true };\n    case ProjectsActionTypes.PROJECTS_SUCCESSFUL:\n      return { ...state, values: action.projects, isFetchingProjects: false };\n    case ProjectsActionTypes.PROJECTS_FAILED:\n      return { ...state, isFetchingProjects: false };\n    default:\n      return state;\n  }\n}\n","import { IFiltersState } from \"../../interfaces/IAppState\";\nimport { FilterActionTypes } from \"./Types\";\nimport { FiltersActions } from \"./Interfaces\";\n\nexport function filters(\n  state: IFiltersState = {\n    tasks: [],\n    types: [],\n    licenses: [],\n    languages: [],\n    titleSubstring: \"\",\n    selected: new Set()\n  },\n  action: FiltersActions\n) {\n  switch (action.type) {\n    case FilterActionTypes.UPDATE_FILTERS:\n      return {\n        ...state,\n        tasks: action.tasks,\n        types: action.types,\n        licenses: action.licenses,\n        languages: action.languages,\n        titleSubstring: action.titleSubstring\n      };\n    case FilterActionTypes.UPDATE_SELECTED_FILTERS:\n      return {\n        ...state,\n        selected: action.selected\n      };\n    case FilterActionTypes.UPDATE_TITLE_SUBSTRING_FILTER:\n      return {\n        ...state,\n        titleSubstring: action.titleSubstring\n      };\n    default:\n      return state;\n  }\n}\n","import { IResultsState } from \"../../interfaces/IAppState\";\nimport { ResultsActions } from \"./Interfaces\";\nimport { ResultsActionTypes } from \"./Types\";\n\nexport function results(\n  state: IResultsState = {\n    values: []\n  },\n  action: ResultsActions\n) {\n  switch (action.type) {\n    case ResultsActionTypes.STORE_RESULTS:\n      return { ...state, values: action.results };\n    default:\n      return state;\n  }\n}\n","import { IProjectInfo } from \"../interfaces/IProjectInfo\";\n\n// Despite the data being a static file, we don't pull it in using Webpack so\n//   we can change to using a restful service in the future.\nexport function fetchProjects(): Promise<IProjectInfo[]> {\n  return fetch(\"./data/glTF-projects-data.json\")\n    .then(r => r.json())\n    .catch(error => console.error(`Error fetching data. Reason: ${error}`));\n}\n","import {\n  IRequestProjectsAction,\n  ISuccessfulProjectsAction,\n  IFailedProjectsAction\n} from \"./Interfaces\";\nimport { ProjectsActionTypes } from \"./Types\";\nimport { IProjectInfo } from \"../../interfaces/IProjectInfo\";\n\nexport function requestProjects(): IRequestProjectsAction {\n  return {\n    type: ProjectsActionTypes.PROJECTS_REQUESTED\n  };\n}\n\nexport function successfulProjects(\n  projects: IProjectInfo[]\n): ISuccessfulProjectsAction {\n  return {\n    type: ProjectsActionTypes.PROJECTS_SUCCESSFUL,\n    projects\n  };\n}\n\nexport function failedProjects(error: Error): IFailedProjectsAction {\n  return {\n    type: ProjectsActionTypes.PROJECTS_FAILED,\n    error: error\n  };\n}\n","import { call, takeEvery, put } from \"redux-saga/effects\";\nimport { fetchProjects } from \"../../services/DataService\";\nimport * as actions from \"./Actions\";\nimport { ProjectsActionTypes } from \"./Types\";\nimport { IProjectInfo } from \"../../interfaces/IProjectInfo\";\n\nexport function* retrieveProjects() {\n  try {\n    const projects: IProjectInfo[] = yield call(fetchProjects);\n    let id = 0;\n    yield put(\n      actions.successfulProjects(\n        projects.map(p => {\n          // This work gives us a stable key. Eventually when this is database\n          // backed the ID will be provided by the DB and this can be removed.\n          p.id = id++;\n          return p;\n        })\n      )\n    );\n  } catch (err) {\n    yield put(actions.failedProjects(err));\n  }\n}\n\nexport function* updateProjects() {\n  yield takeEvery(ProjectsActionTypes.PROJECTS_REQUESTED, retrieveProjects);\n}\n","import { IAppState } from \"../../interfaces/IAppState\";\n\nexport const getProjects = (state: IAppState) => state.projects.values;\n","import { takeEvery, all, call, select, put } from \"redux-saga/effects\";\nimport { createNewFilter, FilterDimension } from \"../../interfaces/IFilter\";\nimport { IProjectInfo } from \"../../interfaces/IProjectInfo\";\nimport { ProjectsActionTypes } from \"../projects/Types\";\nimport * as projectSelectors from \"../projects/Selectors\";\nimport * as actions from \"./Actions\";\n\nconst DEFAULT_FULL_TEXT_TITLE_VALUE = \"\";\n\nexport function calculateTaskFilters(projects: IProjectInfo[]) {\n  const tasks = [\n    ...new Set(projects.flatMap(p => p.task).filter(x => x))\n  ] as string[]; // We know we have no undefined or blank values.\n  return tasks.map(t => createNewFilter(FilterDimension.Task, t));\n}\n\nexport function calculateTypeFilters(projects: IProjectInfo[]) {\n  const types = [\n    ...new Set(projects.flatMap(p => p.type).filter(x => x))\n  ] as string[];\n  return types.map(t => createNewFilter(FilterDimension.Type, t));\n}\n\nexport function calculateLicenseFilters(projects: IProjectInfo[]) {\n  const licenses = [\n    ...new Set(projects.flatMap(p => p.license).filter(x => x))\n  ] as string[];\n  return licenses.map(l => createNewFilter(FilterDimension.License, l));\n}\n\nexport function calculateLanguageFilters(projects: IProjectInfo[]) {\n  const languages = [\n    ...new Set(projects.flatMap(p => p.language).filter(x => x))\n  ] as string[];\n  return languages.map(l => createNewFilter(FilterDimension.Language, l));\n}\n\nexport function* calculateFilters() {\n  const projects = yield select(projectSelectors.getProjects);\n  const [tasks, types, licenses, languages] = yield all([\n    call(calculateTaskFilters, projects),\n    call(calculateTypeFilters, projects),\n    call(calculateLicenseFilters, projects),\n    call(calculateLanguageFilters, projects)\n  ]);\n  yield put(\n    actions.updateFilters(\n      tasks,\n      types,\n      licenses,\n      languages,\n      DEFAULT_FULL_TEXT_TITLE_VALUE\n    )\n  );\n  yield put(actions.updateSelectedFilters(new Set()));\n}\n\nexport function* watchForFilterRecalculate() {\n  yield takeEvery(ProjectsActionTypes.PROJECTS_SUCCESSFUL, calculateFilters);\n}\n","import { createSelector } from \"reselect\";\nimport { IAppState } from \"../../interfaces/IAppState\";\n\nexport const getFilters = (state: IAppState) => state.filters;\n\nexport const getSelectedFilters = createSelector(\n  getFilters,\n  filters => filters.selected\n);\n\nexport const getTitleSubstring = createSelector(\n  getFilters,\n  filters => filters.titleSubstring\n);\n","import { IProjectInfo } from \"../../interfaces/IProjectInfo\";\nimport { ResultsActionTypes } from \"./Types\";\nimport { IRecalculateResultsAction, IStoreResultsAction } from \"./Interfaces\";\n\nexport function storeResults(results: IProjectInfo[]): IStoreResultsAction {\n  return {\n    type: ResultsActionTypes.STORE_RESULTS,\n    results\n  };\n}\n\nexport function recalculateResults(): IRecalculateResultsAction {\n  return {\n    type: ResultsActionTypes.RECALCULATE_RESULTS\n  };\n}\n","import { takeEvery, all, put, select, debounce } from \"redux-saga/effects\";\nimport * as projectSelectors from \"../projects/Selectors\";\nimport * as filterSelectors from \"../filters/Selectors\";\nimport { IProjectInfo } from \"../../interfaces/IProjectInfo\";\nimport * as actions from \"./Actions\";\nimport { IFilter, FilterDimension } from \"../../interfaces/IFilter\";\nimport { FilterActionTypes } from \"../filters/Types\";\n\ninterface IGroupedFilters {\n  [dimension: string]: IFilter[];\n}\n\nfunction applyTagFilters(\n  projects: IProjectInfo[],\n  selectedFilters: Set<IFilter>\n): IProjectInfo[] {\n  if (selectedFilters.size < 1) {\n    return projects;\n  }\n\n  const dimensions = Object.values(FilterDimension);\n  const groupedFilters = Array.from(selectedFilters).reduce<IGroupedFilters>(\n    (acc, curr) => {\n      if (!acc[curr.dimension]) {\n        acc[curr.dimension] = [];\n      }\n\n      acc[curr.dimension].push(curr);\n\n      return acc;\n    },\n    {}\n  );\n\n  return projects.filter(project => {\n    let match = false;\n\n    for (const dimension of dimensions) {\n      if (!groupedFilters[dimension]) continue;\n\n      match = groupedFilters[dimension].some(filter => {\n        if (project[dimension]) {\n          // Within the dimension we do an OR.\n          return project[dimension]!.some(v => v === filter.value);\n        }\n\n        return false;\n      });\n\n      // No matches for this dimension? Break and continue to the next once\n      // since we need all dimensions to match for our AND.\n      if (!match) break;\n    }\n\n    return match;\n  });\n}\n\nfunction applyTitleSearchFilter(\n  projects: IProjectInfo[],\n  titleSubstring?: string\n): IProjectInfo[] {\n  if (!titleSubstring) {\n    return projects;\n  }\n\n  return projects.filter(p => p.name.includes(titleSubstring));\n}\n\nexport function* applyFilters() {\n  const [projects, selectedFilters, titleSubstring]: [\n    IProjectInfo[],\n    Set<IFilter>,\n    string\n  ] = yield all([\n    select(projectSelectors.getProjects),\n    select(filterSelectors.getSelectedFilters),\n    select(filterSelectors.getTitleSubstring)\n  ]);\n\n  const interimResults = applyTagFilters(projects, selectedFilters);\n  const results = applyTitleSearchFilter(interimResults, titleSubstring);\n\n  yield put(actions.storeResults(results));\n}\n\nexport function* watchForResultUpdates() {\n  yield takeEvery(FilterActionTypes.UPDATE_SELECTED_FILTERS, applyFilters);\n  yield debounce(\n    500,\n    FilterActionTypes.UPDATE_TITLE_SUBSTRING_FILTER,\n    applyFilters\n  );\n}\n","import { fork, put } from \"redux-saga/effects\";\nimport { updateProjects as watchForProjectUpdates } from \"./projects/Sagas\";\nimport { ProjectsActionTypes } from \"./projects/Types\";\nimport { watchForFilterRecalculate } from \"./filters/Sagas\";\nimport { watchForResultUpdates } from \"./results/Sagas\";\n\nexport function* startup() {\n  yield put({ type: ProjectsActionTypes.PROJECTS_REQUESTED });\n}\n\nexport default function* root() {\n  yield fork(startup);\n  yield fork(watchForProjectUpdates);\n  yield fork(watchForFilterRecalculate);\n  yield fork(watchForResultUpdates);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"@redux-saga/core\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport rootReducer from \"./store/Reducers\";\nimport rootSagas from \"./store/Sagas\";\n\n// A note about the use of redux here; a lot of inner deliberations were made\n// before choosing to pull in both Redux and Sagas for this app. The idea is\n// to keep this app mostly simple, but Redux and Sagas were pulled in for two\n// major reasons:\n//\n//   1. We have to communicate data changes across the app to several components.\n//   2. Redux makes managing complex state changes (such as filtering) easy.\n//\n// Yes, this is probably over-engineered, but Redux is the best tool for this\n// potentially complex task. If you hate it, blame me and I'd be glad to bike\n// shed about it with you. -ANM\n\nconst initialState = {};\n\nconst sagaMiddleware = createSagaMiddleware({});\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSagas);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\") as HTMLElement\n);\n"],"sourceRoot":""}